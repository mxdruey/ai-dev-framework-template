version: '3.8'

# Development environment for AI Development Framework projects
services:
  # Node.js development environment
  node-dev:
    image: node:18-alpine
    working_dir: /workspace
    volumes:
      - .:/workspace
      - node_modules:/workspace/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3000
    ports:
      - "3000:3000"
      - "3001:3001"  # For Create React App
      - "5173:5173"  # For Vite
    command: sh -c "npm install && npm run dev"
    networks:
      - ai-dev-network

  # Python development environment
  python-dev:
    image: python:3.11-slim
    working_dir: /workspace
    volumes:
      - .:/workspace
    environment:
      - PYTHONUNBUFFERED=1
      - FLASK_ENV=development
      - DJANGO_DEBUG=True
    ports:
      - "8000:8000"  # Django/Flask
      - "8888:8888"  # Jupyter
    command: sh -c "pip install -r requirements.txt && python app.py"
    networks:
      - ai-dev-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=devpass
      - POSTGRES_DB=devdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - ai-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ai-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB (for AI agent systems)
  mongodb:
    image: mongo:6
    environment:
      - MONGO_INITDB_ROOT_USERNAME=devuser
      - MONGO_INITDB_ROOT_PASSWORD=devpass
      - MONGO_INITDB_DATABASE=devdb
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - ai-dev-network

  # Elasticsearch (for search and logging)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - ai-dev-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana (for log visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - ai-dev-network
    depends_on:
      - elasticsearch

  # pgAdmin (PostgreSQL management)
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "5050:80"
    networks:
      - ai-dev-network
    depends_on:
      - postgres

  # Redis Commander (Redis management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - ai-dev-network
    depends_on:
      - redis

# Named volumes for data persistence
volumes:
  node_modules:
  postgres_data:
  redis_data:
  mongo_data:
  elasticsearch_data:

# Network for service communication
networks:
  ai-dev-network:
    driver: bridge